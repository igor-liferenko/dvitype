--- cdvitype.w
+++ cdvitype.w
@@ -118,10 +118,31 @@
 |write| when this program writes on |output|, so that all such output
 could easily be redirected if desired.
 
-@d print(...)	write(__VA_ARGS__)
-@d print_ln(...)	write_ln(__VA_ARGS__)
+@d write(file,...) fprintf(file.f,__VA_ARGS__)
+@d print(...) write(output,__VA_ARGS__)
+@d print_ln(X,...) print(X"\n",##__VA_ARGS__)
 
 @p@!@!
+#include <stdint.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <math.h>
+
+@h
+
+#define chr(X) ((unsigned char)(X))
+#define get(file) @[file.d=fgetc(file.f)@]
+#define read(file,x) @[x=file.d,get(file)@]
+#define eof(file) @[(file.f==NULL||feof(file.f))@]
+#define set_pos(file,n) @[fseek(file.f,n,SEEK_SET),get(file)@]
+#define eoln(file) @[(file.d=='\n'||feof(file.f))@]
+#define reset(file) @[file.f=stdin,get(file)@]
+#define read_ln(file)
+#define rewrite(file) @[file.f=stdout@]
+#define write_ln(file,X) @[write(file,X"\n")@]
+
 @<Labels in the outer block@>@;
 @<Constants in the outer block@>@;
 @<Types in the outer block@>@;
@@ -166,13 +187,13 @@
 contains the only non-local |goto| statement in \.{DVItype}.
 @^system dependencies@>
 
-@d abort(...)	{@+print( ' ' ,__VA_ARGS__);jump_out();
+@d abort(...) {@+print(" "__VA_ARGS__);jump_out();
     } 
-@d bad_dvi(...)	abort("Bad DVI file: ",__VA_ARGS__, '!' )
+@d bad_dvi(X,...) abort("Bad DVI file: "X"!",##__VA_ARGS__)
 @.Bad DVI file@>
 
 @p void jump_out(void)
-{@+exit(0);
+{@+exit(1);
 } 
 
 @*The character set.
@@ -867,12 +888,12 @@
 @^system dependencies@>
 
 @p void open_dvi_file(void) /*prepares to read packed bytes in |dvi_file|*/ 
-{@+reset(dvi_file);
+{@+get(dvi_file);
 cur_loc=0;
 } 
 @#
 void open_tfm_file(void) /*prepares to read packed bytes in |tfm_file|*/ 
-{@+reset(tfm_file, cur_name);
+{@+if ((tfm_file.f=fopen(cur_name+1, "r"))!=NULL) get(tfm_file);
 } 
 
 @ If you looked carefully at the preceding code, you probably asked,
@@ -883,7 +904,7 @@
 
 @<Glob...@>=
 int @!cur_loc; /*where we are about to look, in |dvi_file|*/ 
-uint8_t @!cur_name0[name_length], *const @!cur_name = @!cur_name0-1; /*external name,
+char @!cur_name0[name_length+1], *const @!cur_name = @!cur_name0-1; /*external name,
   with no lower case letters*/ 
 
 @ It turns out to be convenient to read four bytes at a time, when we are
@@ -977,7 +998,7 @@
 |eof(f)| is true; we use |cur_pos| only in such a situation.
 
 @p int dvi_length(void)
-{@+set_pos(dvi_file,-1);return cur_pos(dvi_file);
+{@+fseek(dvi_file.f,0,SEEK_END);return ftell(dvi_file.f);
 } 
 @#
 void move_to_byte(int n)
@@ -1058,7 +1079,7 @@
 if (f==invalid_font) print("UNDEFINED!");
 @.UNDEFINED@>
 else{@+for (k=font_name[f]; k<=font_name[f+1]-1; k++) 
-    print(xchr[names[k]]);
+    print("%c",xchr[names[k]]);
   } 
 } 
 
@@ -1101,11 +1122,11 @@
 @<Store character-width indices at the end of the |width| table@>;
 @<Read and convert the width values, setting up the |in_width| table@>;
 @<Move the widths from |in_width| to |width|, and append |pixel_width| values@>;
-width_ptr=wp;in_TFM=true;goto label9999;
+width_ptr=wp;return true;
 label9997: print_ln("---not loaded, TFM file is bad");
 @.TFM file is bad@>
-label9998: return false;
-label9999: ;} 
+return false;
+}
 
 @ @<Read past the header...@>=
 read_tfm_word();lh=b2*256+b3;
@@ -1114,7 +1135,7 @@
 if (width_ptr+font_ec[nf]-font_bc[nf]+1 > max_widths) 
   {@+print_ln("---not loaded, DVItype needs larger width table");
 @.DVItype needs larger...@>
-    goto label9998;
+    return false;
   } 
 wp=width_ptr+font_ec[nf]-font_bc[nf]+1;
 read_tfm_word();nw=b0*256+b1;
@@ -1316,6 +1337,7 @@
 ASCII_code @!buffer[terminal_line_length+1];
 text_file @!term_in; /*the terminal, considered as an input file*/ 
 text_file @!term_out; /*the terminal, considered as an output file*/ 
+text_file @!output;
 
 @ Since the terminal is being used for both input and output, some systems
 need a special routine to make sure that the user can see a prompt message
@@ -1325,7 +1347,7 @@
 subroutine |update_terminal| in order to avoid this problem.
 @^system dependencies@>
 
-@d update_terminal	break(term_out) /*empty the terminal output buffer*/ 
+@d update_terminal	fflush(term_out.f) /*empty the terminal output buffer*/
 
 @ During the dialog, \.{DVItype} will treat the first blank space in a
 line as the end of that line. Therefore |input_ln| makes sure that there
@@ -1461,13 +1483,13 @@
 @.Options selected@>
 print("  Starting page = ");
 for (k=0; k<=start_vals; k++) 
-  {@+if (start_there[k]) print(start_count[k]: 1);
-  else print( '*' );
-  if (k < start_vals) print( '.' );
-  else print_ln( ' ' );
+  {@+if (start_there[k]) print("%d",start_count[k]);
+  else print("*");
+  if (k < start_vals) print(".");
+  else print_ln(" ");
   } 
-print_ln("  Maximum number of pages = ", max_pages: 1);
-print("  Output level = ", out_mode: 1);
+print_ln("  Maximum number of pages = %d", max_pages);
+print("  Output level = %d", out_mode);
 switch (out_mode) {
 case errors_only: print_ln(" (showing bops, fonts, and error messages only)");@+break;
 case terse: print_ln(" (terse)");@+break;
@@ -1478,8 +1500,8 @@
     print_ln(" (the works: same as level 3 in this DVItype)");
     } 
 } @/
-print_ln("  Resolution = ", resolution: 12: 8," pixels per inch");
-if (new_mag > 0) print_ln("  New magnification factor = ", new_mag/(double)1000: 8: 3)
+print_ln("  Resolution = %12.8f pixels per inch", resolution);
+if (new_mag > 0) print_ln("  New magnification factor = %8.3f", new_mag/(double)1000)
 
 @*Defining fonts.
 When |out_mode==the_works|, \.{DVItype} reads the postamble first and loads
@@ -1510,8 +1532,7 @@
 uint8_t @!r; /*index into |cur_name|*/ 
 int @!j, @!k; /*indices into |names|*/ 
 bool @!mismatch; /*do names disagree?*/ 
-if (nf==max_fonts) abort("DVItype capacity exceeded (max fonts=",
-    max_fonts: 1,")!");
+if (nf==max_fonts) abort("DVItype capacity exceeded (max fonts=%d)!", max_fonts);
 @.DVItype capacity exceeded...@>
 font_num[nf]=e;f=0;
 while (font_num[f]!=e) incr(f);
@@ -1558,17 +1579,17 @@
 else m=round((1000.0*conv*q)/(double)(true_conv*d));
 p=get_byte();n=get_byte();
 if (font_name[nf]+n+p > name_size) 
-  abort("DVItype capacity exceeded (name size=", name_size: 1,")!");
+  abort("DVItype capacity exceeded (name size=%d)!", name_size);
 @.DVItype capacity exceeded...@>
 font_name[nf+1]=font_name[nf]+n+p;
 if (showing) print(": ");
    /*when |showing| is true, the font number has already been printed*/ 
-else print("Font ", e: 1,": ");
+else print("Font %d: ", e);
 if (n+p==0) print("null font name!");
 @.null font name@>
 else for (k=font_name[nf]; k<=font_name[nf+1]-1; k++) names[k]=get_byte();
 print_font(nf);
-if (!showing) if (m!=1000) print(" scaled ", m: 1)
+if (!showing) if (m!=1000) print(" scaled %d", m)
 @.scaled@>
 
 @ @<Load the new font, unless there are problems@>=
@@ -1578,14 +1599,14 @@
   print("---not loaded, TFM file can't be opened!");
 @.TFM file can\'t be opened@>
 else{@+if ((q <= 0)||(q >= 01000000000)) 
-    print("---not loaded, bad scale (", q: 1,")!");
+    print("---not loaded, bad scale (%d)!", q);
 @.bad scale@>
   else if ((d <= 0)||(d >= 01000000000)) 
-    print("---not loaded, bad design size (", d: 1,")!");
+    print("---not loaded, bad design size (%d)!", d);
 @.bad design size@>
   else if (in_TFM(q)) @<Finish loading the new font info@>;
   } 
-if (out_mode==errors_only) print_ln( ' ' );
+if (out_mode==errors_only) print_ln(" ");
 } 
 
 @ @<Finish loading...@>=
@@ -1594,20 +1615,20 @@
   {@+print_ln("---beware: check sums do not agree!");
 @.beware: check sums do not agree@>
 @.check sums do not agree@>
-  print_ln("   (", c: 1," vs. ", tfm_check_sum: 1, ')' );
+  print_ln("   (%d vs. %d)", c, tfm_check_sum);
   print("   ");
   } 
 if (abs(tfm_design_size-d) > 2) 
   {@+print_ln("---beware: design sizes do not agree!");
 @.beware: design sizes do not agree@>
 @.design sizes do not agree@>
-  print_ln("   (", d: 1," vs. ", tfm_design_size: 1, ')' );
+  print_ln("   (%d vs. %d)", d, tfm_design_size);
   print("   ");
   } 
-print("---loaded at size ", q: 1," DVI units");
+print("---loaded at size %d DVI units", q);
 d=round((100.0*conv*q)/(double)(true_conv*d));
 if (d!=100) 
-  {@+print_ln( ' ' );print(" (this font is magnified ", d: 1,"%)");
+  {@+print_ln(" ");print(" (this font is magnified %d%%)", d);
   } 
 @.this font is magnified@>
 incr(nf); /*now the new font is officially present*/ 
@@ -1619,14 +1640,14 @@
 The string variable |default_directory| contains the name of this area.
 @^system dependencies@>
 
-@d default_directory_name	"TeXfonts:" /*change this to the correct name*/ 
+@d default_directory_name	"TeXfonts/" /*change this to the correct name*/ 
 @d default_directory_name_length	9 /*change this to the correct length*/ 
 
 @<Glob...@>=
-uint8_t @!default_directory0[default_directory_name_length], *const @!default_directory = @!default_directory0-1;
+char @!default_directory0[default_directory_name_length+1], *const @!default_directory = @!default_directory0-1;
 
 @ @<Set init...@>=
-default_directory=default_directory_name;
+strcpy(default_directory+1, default_directory_name);
 
 @ The string |cur_name| is supposed to be set to the external name of the
 \.{TFM} file for the current font. This usually means that we need to
@@ -1636,7 +1657,6 @@
 @^system dependencies@>
 
 @<Move font name into the |cur_name| string@>=
-for (k=1; k<=name_length; k++) cur_name[k]= ' ' ;
 if (p==0) 
   {@+for (k=1; k<=default_directory_name_length; k++) 
     cur_name[k]=default_directory[k];
@@ -1646,14 +1666,14 @@
 for (k=font_name[nf]; k<=font_name[nf+1]-1; k++) 
   {@+incr(r);
   if (r+4 > name_length) 
-    abort("DVItype capacity exceeded (max font name length=",
-      name_length: 1,")!");
+    abort("DVItype capacity exceeded (max font name length=%d)!", name_length);
 @.DVItype capacity exceeded...@>
   if ((names[k] >= 'a')&&(names[k] <= 'z')) 
       cur_name[r]=xchr[names[k]-0]; /* do not uppercase */ 
   else cur_name[r]=xchr[names[k]];
   } 
 cur_name[r+1]= '.' ;cur_name[r+2]= 't' ;cur_name[r+3]= 'f' ;cur_name[r+4]= 'm' 
+;cur_name[r+5]=0
 
 @*Low level output routines.
 Simple text in the \.{DVI} file is saved in a buffer until |line_length-2|
@@ -1675,9 +1695,9 @@
 {@+int k; /*index into |text_buf|*/ 
 if (text_ptr > 0) 
   {@+if (out_mode > errors_only) 
-    {@+print( '[' );
-    for (k=1; k<=text_ptr; k++) print(xchr[text_buf[k]]);
-    print_ln( ']' );
+    {@+print("[");
+    for (k=1; k<=text_ptr; k++) print("%c",xchr[text_buf[k]]);
+    print_ln("]");
     } 
   text_ptr=0;
   } 
@@ -1740,15 +1760,15 @@
 consider a simpler routine that computes the first parameter of each
 opcode.
 
-@d four_cases(X)	X: X: case 1: X: case 2: X: case 3
-@d eight_cases(X)	four_cases(X): four_cases(X: case 4)
-@d sixteen_cases(X)	eight_cases(X): eight_cases(X: case 8)
-@d thirty_two_cases(X)	sixteen_cases(X): sixteen_cases(X: case 16)
-@d sixty_four_cases(X)	thirty_two_cases(X): thirty_two_cases(X: case 32)
+@d four_cases(X)	case X: case X+1: case X+2: case X+3
+@d eight_cases(X)	four_cases(X): four_cases(X+4)
+@d sixteen_cases(X)	eight_cases(X): eight_cases(X+8)
+@d thirty_two_cases(X)	sixteen_cases(X): sixteen_cases(X+16)
+@d sixty_four_cases(X)	thirty_two_cases(X): thirty_two_cases(X+32)
 
 @p int first_par(eight_bits o)
 {@+switch (o) {
-sixty_four_cases(case set_char_0): sixty_four_cases(case set_char_0+64): 
+sixty_four_cases(set_char_0): sixty_four_cases(set_char_0+64): 
   return o-set_char_0;@+break;
 case set1: case put1: case fnt1: case xxx1: case fnt_def1: return get_byte();@+break;
 case set1+1: case put1+1: case fnt1+1: case xxx1+1: case fnt_def1+1: return get_two_bytes();@+break;
@@ -1763,7 +1783,7 @@
 case x0: return x;@+break;
 case y0: return y;@+break;
 case z0: return z;@+break;
-sixty_four_cases(case fnt_num_0): return o-fnt_num_0;
+sixty_four_cases(fnt_num_0): return o-fnt_num_0;
 } 
 } 
 
@@ -1815,10 +1835,10 @@
 cur_font=invalid_font; /*set current font undefined*/ 
 s=0;h=0;v=0;w=0;x=0;y=0;z=0;hh=0;vv=0;
    /*initialize the state variables*/ 
-while (true) @<Translate the next command in the \.{DVI} file; |goto 9999| with |do_page=true|
+while (true) @<Translate the next command in the \.{DVI} file; |return true|
 if it was |eop|; |goto 9998| if premature termination is needed@>;
-label9998: print_ln( '!' );return false;
-label9999: ;} 
+label9998: print_ln("!");return false;
+}
 
 @ Commands are broken down into ``major'' and ``minor'' categories:
 A major command is always shown in full, while a minor one is
@@ -1827,13 +1847,13 @@
 and the typesetting of characters in a line; these are shown in full
 only if |out_mode >= verbose|.
 
-@d show(X)	{@+flush_text();showing=true;print(a: 1,": ", X);
+@d show(X,...) {@+flush_text();showing=true;print("%d: "X,a,##__VA_ARGS__);
   } 
 @d major(...)	if (out_mode > errors_only) show(__VA_ARGS__)
-@d minor(...)	if (out_mode > terse) 
-  {@+showing=true;print(a: 1,": ",__VA_ARGS__);
+@d minor(X,...) if (out_mode > terse)
+  {@+showing=true;print("%d: "X,a,##__VA_ARGS__);
   } 
-@d error(...)	if (!showing) show(__VA_ARGS__)@;else print( ' ' ,__VA_ARGS__)
+@d error(...) if (!showing) show(__VA_ARGS__)@;else print(" "__VA_ARGS__)
 
 @<Translate the next command...@>=
 {@+a=cur_loc;showing=false;
@@ -1849,7 +1869,7 @@
 move_right: @<Finish a command that sets |h:=h+q|, then |goto done|@>;
 show_state: @<Show the values of |ss|, |h|, |v|, |w|, |x|, |y|, |z|, |hh|, and |vv|;
 then |goto done|@>;
-done: if (showing) print_ln( ' ' );
+done: if (showing) print_ln(" ");
 } 
 
 @ The multiway switch in |first_par|, above, was organized by the length
@@ -1858,9 +1878,9 @@
 @<Start translation...@>=
 if (o < set_char_0+128) @<Translate a |set_char| command@>@;
 else switch (o) {
-  four_cases(case set1): {@+major("set", o-set1+1: 1, ' ' , p: 1);goto fin_set;
+  four_cases(set1): {@+major("set%d %d", o-set1+1, p);goto fin_set;
     } 
-  four_cases(case put1): {@+major("put", o-put1+1: 1, ' ' , p: 1);goto fin_set;
+  four_cases(put1): {@+major("put%d %d", o-put1+1, p);goto fin_set;
     } 
   case set_rule: {@+major("setrule");goto fin_rule;
     } 
@@ -1877,28 +1897,26 @@
 int q; /*parameter of the current command*/ 
 int @!k; /*loop index*/ 
 bool @!bad_char; /*has a non-ASCII character code appeared in this \\{xxx}?*/ 
-bool @!pure; /*is the command error-free?*/ 
 int @!vvv; /*|v|, rounded to the nearest pixel*/ 
-pure=true;
 switch (o) {
 @t\4@>@<Cases for vertical motion@>@;
 @t\4@>@<Cases for fonts@>@;
-four_cases(case xxx1): @<Translate an |xxx| command and |goto done|@>@;
+four_cases(xxx1): @<Translate an |xxx| command and |goto done|@>@;
 case pre: {@+error("preamble command within a page!");goto label9998;
   } 
 @.preamble command within a page@>
 case post: case post_post: {@+error("postamble command within a page!");goto label9998;
 @.postamble command within a page@>
   } 
-default:{@+error("undefined command ", o: 1, '!' );
+default:{@+error("undefined command %d!", o);
   goto done;
 @.undefined command@>
   } 
 } 
 move_down: @<Finish a command that sets |v:=v+p|, then |goto done|@>;
 change_font: @<Finish a command that changes the current font, then |goto done|@>;
-label9998: pure=false;
-done: return pure;
+label9998: return false;
+done: return true;
 } 
 
 @ @<Cases for commands |nop|, |bop|, \dots, |pop|@>=
@@ -1908,10 +1926,9 @@
 @.bop occurred before eop@>
   } 
 case eop: {@+major("eop");
-  if (s!=0) error("stack not empty at end of page (level ",
-    s: 1,")!");
+  if (s!=0) error("stack not empty at end of page (level %d)!", s);
 @.stack not empty...@>
-  do_page=true;print_ln( ' ' );goto label9999;
+  print_ln(" ");return true;
   } 
 case push: {@+major("push");
   if (s==max_s_so_far) 
@@ -1920,8 +1937,8 @@
 @.deeper than claimed...@>
 @.push deeper than claimed...@>
     if (s==stack_size) 
-      {@+error("DVItype capacity exceeded (stack size=",
-        stack_size: 1, ')' );goto label9998;
+      {@+error("DVItype capacity exceeded (stack size=%d)", stack_size);
+        goto label9998;
       } 
     } 
   hstack[s]=h;vstack[s]=v;wstack[s]=w;
@@ -1949,14 +1966,14 @@
     {@+out_text(' ');hh=pixel_round(h+p);
     } 
   else hh=hh+pixel_round(p);
-  minor(X, Y, ' ' , p: 1);q=p;goto move_right
+  minor(X" %d", Y, p);q=p;goto move_right
 
 @<Cases for horizontal motion@>=
-four_cases(case right1): {@+out_space("right", o-right1+1: 1);
+four_cases(right1): {@+out_space("right%d", o-right1+1);
   } 
-case w0: four_cases(case w1): {@+w=p;out_space( 'w' , o-w0: 1);
+case w0: four_cases(w1): {@+w=p;out_space("w%d", o-w0);
   } 
-case x0: four_cases(case x1): {@+x=p;out_space( 'x' , o-x0: 1);
+case x0: four_cases(x1): {@+x=p;out_space("x%d", o-x0);
   } 
 
 @ Vertical motion is done similarly, but with the threshold between
@@ -1966,24 +1983,24 @@
 
 @d out_vmove(X, Y)	if (abs(p) >= 5*font_space[cur_font]) vv=pixel_round(v+p);
   else vv=vv+pixel_round(p);
-  major(X, Y, ' ' , p: 1);goto move_down
+  major(X" %d", Y, p);goto move_down
 
 @<Cases for vertical motion@>=
-four_cases(case down1): {@+out_vmove("down", o-down1+1: 1);
+four_cases(down1): {@+out_vmove("down%d", o-down1+1);
   } 
-case y0: four_cases(case y1): {@+y=p;out_vmove( 'y' , o-y0: 1);
+case y0: four_cases(y1): {@+y=p;out_vmove("y%d", o-y0);
   } 
-case z0: four_cases(case z1): {@+z=p;out_vmove( 'z' , o-z0: 1);
+case z0: four_cases(z1): {@+z=p;out_vmove("z%d", o-z0);
   } 
 
 @ @<Cases for fonts@>=
-sixty_four_cases(case fnt_num_0): {@+major("fntnum", p: 1);
+sixty_four_cases(fnt_num_0): {@+major("fntnum%d", p);
   goto change_font;
   } 
-four_cases(case fnt1): {@+major("fnt", o-fnt1+1: 1, ' ' , p: 1);
+four_cases(fnt1): {@+major("fnt%d %d", o-fnt1+1, p);
   goto change_font;
   } 
-four_cases(case fnt_def1): {@+major("fntdef", o-fnt_def1+1: 1, ' ' , p: 1);
+four_cases(fnt_def1): {@+major("fntdef%d %d", o-fnt_def1+1, p);
   define_font(p);goto done;
   } 
 
@@ -1994,9 +2011,9 @@
 for (k=1; k<=p; k++) 
   {@+q=get_byte();
   if ((q < ' ')||(q > '~')) bad_char=true;
-  if (showing) print(xchr[q]);
+  if (showing) print("%c",xchr[q]);
   } 
-if (showing) print( '\'' );
+if (showing) print("'");
 if (bad_char) error("non-ASCII character in xxx command!");
 @.non-ASCII character...@>
 goto done;
@@ -2004,9 +2021,9 @@
 
 @ @<Translate a |set_char|...@>=
 {@+if ((o > ' ')&&(o <= '~')) 
-  {@+out_text(p);minor("setchar", p: 1);
+  {@+out_text(p);minor("setchar%d", p);
   } 
-else major("setchar", p: 1);
+else major("setchar%d", p);
 goto fin_set;
 } 
 
@@ -2017,11 +2034,11 @@
 if ((p < font_bc[cur_font])||(p > font_ec[cur_font])) q=invalid_width;
 else q=char_width(cur_font)(p);
 if (q==invalid_width) 
-  {@+error("character ", p: 1," invalid in font ");
+  {@+error("character %d invalid in font ", p);
 @.character $c$ invalid...@>
   print_font(cur_font);
   if (cur_font!=invalid_font) 
-     print( '!' ); /*the invalid font has `\.!' in its name*/ 
+     print("!"); /*the invalid font has `\.!' in its name*/ 
   } 
 if (o >= put1) goto done;
 if (q==invalid_width) q=0;
@@ -2031,13 +2048,13 @@
 @ @<Finish a command that either sets or puts a rule...@>=
 q=signed_quad();
 if (showing) 
-  {@+print(" height ", p: 1,", width ", q: 1);
+  {@+print(" height %d, width %d", p, q);
   if (out_mode > mnemonics_only) 
     if ((p <= 0)||(q <= 0)) print(" (invisible)");
-    else print(" (", rule_pixels(p): 1, 'x' , rule_pixels(q): 1," pixels)");
+    else print(" (%dx%d pixels)", rule_pixels(p), rule_pixels(q));
   } 
 if (o==put_rule) goto done;
-if (showing) if (out_mode > mnemonics_only) print_ln( ' ' );
+if (showing) if (out_mode > mnemonics_only) print_ln(" ");
 hh=hh+rule_pixels(q);goto move_right
 
 @ A sequence of consecutive rules, or consecutive characters in a fixed-width
@@ -2054,14 +2071,12 @@
 
 @<Finish a command that sets |h:=h+q|, then |goto done|@>=
 if ((h > 0)&&(q > 0)) if (h > infinity-q) 
-  {@+error("arithmetic overflow! parameter changed from ",
+  {@+error("arithmetic overflow! parameter changed from %d to %d", q, infinity-h);
 @.arithmetic overflow...@>
-    q: 1," to ", infinity-h: 1);
   q=infinity-h;
   } 
 if ((h < 0)&&(q < 0)) if (-h > q+infinity) 
-  {@+error("arithmetic overflow! parameter changed from ",
-    q: 1," to ",(-h)-infinity: 1);
+  {@+error("arithmetic overflow! parameter changed from %d to %d", q, (-h)-infinity);
   q=(-h)-infinity;
   } 
 hhh=pixel_round(h+q);
@@ -2069,14 +2084,14 @@
   if (hhh > hh) hh=hhh-max_drift;
   else hh=hhh+max_drift;
 if (showing) if (out_mode > mnemonics_only) 
-  {@+print(" h:=", h: 1);
-  if (q >= 0) print( '+' );
-  print(q: 1, '=' , h+q: 1,", hh:=", hh: 1);
+  {@+print(" h:=%d", h);
+  if (q >= 0) print("+");
+  print("%d=%d, hh:=%d", q, h+q, hh);
   } 
 h=h+q;
 if (abs(h) > max_h_so_far) 
   {@+if (abs(h) > max_h+99) 
-    {@+error("warning: |h|>", max_h: 1, '!' );
+    {@+error("warning: |h|>%d!", max_h);
 @.warning: |h|...@>
     max_h=abs(h);
     } 
@@ -2086,14 +2101,12 @@
 
 @ @<Finish a command that sets |v:=v+p|, then |goto done|@>=
 if ((v > 0)&&(p > 0)) if (v > infinity-p) 
-  {@+error("arithmetic overflow! parameter changed from ",
+  {@+error("arithmetic overflow! parameter changed from %d to %d", p, infinity-v);
 @.arithmetic overflow...@>
-    p: 1," to ", infinity-v: 1);
   p=infinity-v;
   } 
 if ((v < 0)&&(p < 0)) if (-v > p+infinity) 
-  {@+error("arithmetic overflow! parameter changed from ",
-    p: 1," to ",(-v)-infinity: 1);
+  {@+error("arithmetic overflow! parameter changed from %d to %d", p, (-v)-infinity);
   p=(-v)-infinity;
   } 
 vvv=pixel_round(v+p);
@@ -2101,14 +2114,14 @@
   if (vvv > vv) vv=vvv-max_drift;
   else vv=vvv+max_drift;
 if (showing) if (out_mode > mnemonics_only) 
-  {@+print(" v:=", v: 1);
-  if (p >= 0) print( '+' );
-  print(p: 1, '=' , v+p: 1,", vv:=", vv: 1);
+  {@+print(" v:=%d", v);
+  if (p >= 0) print("+");
+  print("%d=%d, vv:=%d", p, v+p, vv);
   } 
 v=v+p;
 if (abs(v) > max_v_so_far) 
   {@+if (abs(v) > max_v+99) 
-    {@+error("warning: |v|>", max_v: 1, '!' );
+    {@+error("warning: |v|>%d!", max_v);
 @.warning: |v|...@>
     max_v=abs(v);
     } 
@@ -2118,10 +2131,8 @@
 
 @ @<Show the values of |ss|, |h|, |v|, |w|, |x|, |y|, |z|...@>=
 if (showing) if (out_mode > mnemonics_only) 
-  {@+print_ln( ' ' );
-  print("level ", ss: 1,":(h=", h: 1,",v=", v: 1,
-    ",w=", w: 1,",x=", x: 1,",y=", y: 1,",z=", z: 1,
-    ",hh=", hh: 1,",vv=", vv: 1, ')' );
+  {@+print_ln(" ");
+  print("level %d:(h=%d,v=%d,w=%d,x=%d,y=%d,z=%d,hh=%d,vv=%d)", ss, h, v, w, x, y, z, hh, vv);
   } 
 goto done
 
@@ -2130,7 +2141,7 @@
 while (font_num[cur_font]!=p) incr(cur_font);
 if (cur_font==nf) 
   {@+cur_font=invalid_font;
-  error("invalid font selection: font ", p: 1," was never defined!");
+  error("invalid font selection: font %d was never defined!", p);
   } 
 if (showing) if (out_mode > mnemonics_only) 
   {@+print(" current font is ");print_font(cur_font);
@@ -2155,15 +2166,15 @@
 while (true) 
   {@+if (!bop_seen) 
     {@+scan_bop();
-    if (in_postamble) goto label9999;
+    if (in_postamble) return;
     if (!started) if (start_match()) 
-      {@+started=true;goto label9999;
+      {@+started=true;return;
       } 
     } 
   @<Skip until finding |eop|@>;
   bop_seen=false;
   } 
-label9999: ;} 
+}
 
 @ @<Skip until finding |eop|@>=
 @/do@+{if (eof(dvi_file)) bad_dvi("the file ended prematurely");
@@ -2172,14 +2183,14 @@
   p=first_par(k);
   switch (k) {
   case set_rule: case put_rule: down_the_drain=signed_quad();@+break;
-  four_cases(case fnt_def1): {@+define_font(p);
-    print_ln( ' ' );
+  four_cases(fnt_def1): {@+define_font(p);
+    print_ln(" ");
     } @+break;
-  four_cases(case xxx1): while (p > 0) 
+  four_cases(xxx1): while (p > 0) 
     {@+down_the_drain=get_byte();decr(p);
     } @+break;
   case bop: case pre: case post: case post_post: undefined_commands: 
-      bad_dvi("illegal command at byte ", cur_loc-1: 1)@;@+break;
+      bad_dvi("illegal command at byte %d", cur_loc-1)@;@+break;
 @.illegal command at byte n@>
   default:do_nothing;
   } 
@@ -2211,13 +2222,12 @@
     } 
 }@+ while (!(k!=nop));
 if (k==post) in_postamble=true;
-else{@+if (k!=bop) bad_dvi("byte ", cur_loc-1: 1," is not bop");
+else{@+if (k!=bop) bad_dvi("byte %d is not bop", cur_loc-1);
 @.byte n is not bop@>
   new_backpointer=cur_loc-1;incr(page_count);
   for (k=0; k<=9; k++) count[k]=signed_quad();
   if (signed_quad()!=old_backpointer
-    ) print_ln("backpointer in byte ", cur_loc-4: 1,
-      " should be ", old_backpointer: 1, '!' );
+    ) print_ln("backpointer in byte %d should be %d!", cur_loc-4, old_backpointer);
 @.backpointer...should be p@>
   old_backpointer=new_backpointer;
   } 
@@ -2230,20 +2240,20 @@
 
 @<Find the postamble, working back from the end@>=
 n=dvi_length();
-if (n < 53) bad_dvi("only ", n: 1," bytes long");
+if (n < 53) bad_dvi("only %d bytes long", n);
 @.only n bytes long@>
 m=n-4;
 @/do@+{if (m==0) bad_dvi("all 223s");
 @.all 223s@>
 move_to_byte(m);k=get_byte();decr(m);
 }@+ while (!(k!=223));
-if (k!=id_byte) bad_dvi("ID byte is ", k: 1);
+if (k!=id_byte) bad_dvi("ID byte is %d", k);
 @.ID byte is wrong@>
 move_to_byte(m-3);q=signed_quad();
-if ((q < 0)||(q > m-33)) bad_dvi("post pointer ", q: 1," at byte ", m-3: 1);
+if ((q < 0)||(q > m-33)) bad_dvi("post pointer %d at byte %d", q, m-3);
 @.post pointer is wrong@>
 move_to_byte(q);k=get_byte();
-if (k!=post) bad_dvi("byte ", q: 1," is not post");
+if (k!=post) bad_dvi("byte %d is not post", q);
 @.byte n is not post@>
 post_loc=q;first_backpointer=signed_quad()
 
@@ -2270,11 +2280,11 @@
 else{@+@/do@+{
      /*now |q| points to a |post| or |bop| command; |p >= 0| is prev pointer*/ 
     if (p > q-46) 
-      bad_dvi("page link ", p: 1," after byte ", q: 1);
+      bad_dvi("page link %d after byte %d", p, q);
 @.page link wrong...@>
     q=p;move_to_byte(q);k=get_byte();
     if (k==bop) incr(page_count);
-    else bad_dvi("byte ", q: 1," is not bop");
+    else bad_dvi("byte %d is not bop", q);
 @.byte n is not bop@>
     for (k=0; k<=9; k++) count[k]=signed_quad();
     p=signed_quad();
@@ -2288,7 +2298,7 @@
   move_to_byte(start_loc);
   } 
 if (page_count!=total_pages) 
-  print_ln("there are really ", page_count: 1," pages, not ", total_pages: 1, '!' )
+  print_ln("there are really %d pages, not %d!", page_count, total_pages)
 @.there are really n pages@>
 
 @*Reading the postamble.
@@ -2301,7 +2311,7 @@
 {@+int k; /*loop index*/ 
 int @!p, @!q, @!m; /*general purpose registers*/ 
 showing=false;post_loc=cur_loc-5;
-print_ln("Postamble starts at byte ", post_loc: 1, '.' );
+print_ln("Postamble starts at byte %d.", post_loc);
 @.Postamble starts at byte n@>
 if (signed_quad()!=numerator) 
   print_ln("numerator doesn't match the preamble!");
@@ -2313,9 +2323,9 @@
   print_ln("magnification doesn't match the preamble!");
 @.magnification doesn't match@>
 max_v=signed_quad();max_h=signed_quad();@/
-print("maxv=", max_v: 1,", maxh=", max_h: 1);@/
+print("maxv=%d, maxh=%d", max_v, max_h);@/
 max_s=get_two_bytes();total_pages=get_two_bytes();@/
-print_ln(", maxstackdepth=", max_s: 1,", totalpages=", total_pages: 1);
+print_ln(", maxstackdepth=%d, totalpages=%d", max_s, total_pages);
 if (out_mode < the_works) 
   @<Compare the \\{lust} parameters with the accumulated facts@>;
 @<Process the font definitions of the postamble@>;
@@ -2330,19 +2340,19 @@
 
 @<Compare the \\{lust}...@>=
 {@+if (max_v+99 < max_v_so_far) 
-  print_ln("warning: observed maxv was ", max_v_so_far: 1);
+  print_ln("warning: observed maxv was %d", max_v_so_far);
 @.warning: observed maxv...@>
 @.observed maxv was x@>
 if (max_h+99 < max_h_so_far) 
-  print_ln("warning: observed maxh was ", max_h_so_far: 1);
+  print_ln("warning: observed maxh was %d", max_h_so_far);
 @.warning: observed maxh...@>
 @.observed maxh was x@>
 if (max_s < max_s_so_far) 
-  print_ln("warning: observed maxstackdepth was ", max_s_so_far: 1);
+  print_ln("warning: observed maxstackdepth was %d", max_s_so_far);
 @.warning: observed maxstack...@>
 @.observed maxstackdepth was x@>
 if (page_count!=total_pages) 
-  print_ln("there are really ", page_count: 1," pages, not ", total_pages: 1, '!' );
+  print_ln("there are really %d pages, not %d!", page_count, total_pages);
 } 
 @.there are really n pages@>
 
@@ -2352,37 +2362,37 @@
 @<Make sure that the end of the file is well-formed@>=
 q=signed_quad();
 if (q!=post_loc) 
-  print_ln("bad postamble pointer in byte ", cur_loc-4: 1, '!' );
+  print_ln("bad postamble pointer in byte %d!", cur_loc-4);
 @.bad postamble pointer@>
 m=get_byte();
-if (m!=id_byte) print_ln("identification in byte ", cur_loc-1: 1,
+if (m!=id_byte) print_ln("identification in byte %d should be %d!", cur_loc-1, id_byte);
 @.identification...should be n@>
-    " should be ", id_byte: 1, '!' );
 k=cur_loc;m=223;
 while ((m==223)&&!eof(dvi_file)) m=get_byte();
-if (!eof(dvi_file)) bad_dvi("signature in byte ", cur_loc-1: 1,
+if (!eof(dvi_file)) bad_dvi("signature in byte %d should be 223", cur_loc-1)@;
 @.signature...should be...@>
-    " should be 223")@;
 else if (cur_loc < k+4) 
-  print_ln("not enough signature bytes at end of file (",
+  print_ln("not enough signature bytes at end of file (%d)", cur_loc-k);
 @.not enough signature bytes...@>
-    cur_loc-k: 1, ')' );
 
 @ @<Process the font definitions...@>=
 @/do@+{k=get_byte();
 if ((k >= fnt_def1)&&(k < fnt_def1+4)) 
-  {@+p=first_par(k);define_font(p);print_ln( ' ' );k=nop;
+  {@+p=first_par(k);define_font(p);print_ln(" ");k=nop;
   } 
 }@+ while (!(k!=nop));
 if (k!=post_post) 
-  print_ln("byte ", cur_loc-1: 1," is not postpost!")
+  print_ln("byte %d is not postpost!", cur_loc-1)
 @.byte n is not postpost@>
 
 @*The main program.
 Now we are ready to put it all together. This is where \.{DVItype} starts,
 and where it ends.
 
-@p int main(void) {initialize(); /*get all variables initialized*/ 
+@p int main(int argc, char **argv) { if (argc != 3) return 2;
+if ((dvi_file.f=fopen(argv[1],"r"))==NULL) return 2;
+if ((output.f=fopen(argv[2],"w"))==NULL) return 2;
+initialize(); /*get all variables initialized*/
 dialog(); /*set up all the options*/ 
 @<Process the preamble@>;
 if (out_mode==the_works)  /*|random_reading==true|*/ 
@@ -2395,8 +2405,7 @@
 if (out_mode < the_works) 
   {@+if (!in_postamble) skip_pages(true);
   if (signed_quad()!=old_backpointer) 
-    print_ln("backpointer in byte ", cur_loc-4: 1,
-      " should be ", old_backpointer: 1, '!' );
+    print_ln("backpointer in byte %d should be %d!", cur_loc-4, old_backpointer);
 @.backpointer...should be p@>
   read_postamble();
   } 
@@ -2418,15 +2427,15 @@
 @.First byte isn't...@>
 p=get_byte(); /*fetch the identification byte*/ 
 if (p!=id_byte) 
-  print_ln("identification in byte 1 should be ", id_byte: 1, '!' );
+  print_ln("identification in byte 1 should be %d!", id_byte);
 @.identification...should be n@>
 @<Compute the conversion factors@>;
 p=get_byte(); /*fetch the length of the introductory comment*/ 
-print( '\'' );
+print("'");
 while (p > 0) 
-  {@+decr(p);print(xchr[get_byte()]);
+  {@+decr(p);print("%c",xchr[get_byte()]);
   } 
-print_ln( '\'' );
+print_ln("'");
 after_pre=cur_loc
 
 @ The conversion factor |conv| is figured as follows: There are exactly
@@ -2436,19 +2445,19 @@
 
 @<Compute the conversion factors@>=
 numerator=signed_quad();denominator=signed_quad();
-if (numerator <= 0) bad_dvi("numerator is ", numerator: 1);
+if (numerator <= 0) bad_dvi("numerator is %d", numerator);
 @.numerator is wrong@>
-if (denominator <= 0) bad_dvi("denominator is ", denominator: 1);
+if (denominator <= 0) bad_dvi("denominator is %d", denominator);
 @.denominator is wrong@>
-print_ln("numerator/denominator=", numerator: 1, '/' , denominator: 1);
+print_ln("numerator/denominator=%d/%d", numerator, denominator);
 tfm_conv=(25400000.0/(double)numerator)*(denominator/(double)473628672)/(double)16.0;
 conv=(numerator/(double)254000.0)*(resolution/(double)denominator);
 mag=signed_quad();
 if (new_mag > 0) mag=new_mag;
-else if (mag <= 0) bad_dvi("magnification is ", mag: 1);
+else if (mag <= 0) bad_dvi("magnification is %d", mag);
 @.magnification is wrong@>
 true_conv=conv;conv=true_conv*(mag/(double)1000.0);
-print_ln("magnification=", mag: 1,"; ", conv: 16: 8," pixels per DVI unit")
+print_ln("magnification=%d; %16.8f pixels per DVI unit", mag, conv)
 
 @ The code shown here uses a convention that has proved to be useful:
 If the starting page was specified as, e.g., `\.{1.*.-5}', then
@@ -2460,18 +2469,18 @@
 @<Translate up to...@>=
 {@+while (max_pages > 0) 
   {@+decr(max_pages);
-  print_ln( ' ' );print(cur_loc-45: 1,": beginning of page ");
+  print_ln(" ");print("%d: beginning of page ",cur_loc-45);
   for (k=0; k<=start_vals; k++) 
-    {@+print(count[k]: 1);
-    if (k < start_vals) print( '.' );
-    else print_ln( ' ' );
+    {@+print("%d",count[k]);
+    if (k < start_vals) print(".");
+    else print_ln(" ");
     } 
   if (!do_page()) bad_dvi("page ended unexpectedly");
 @.page ended unexpectedly@>
   scan_bop();
-  if (in_postamble) goto done;
+  if (in_postamble) break;
   } 
-done: ;} 
+}
 
 @*System-dependent changes.
 This section should be replaced, if necessary, by changes to the program
